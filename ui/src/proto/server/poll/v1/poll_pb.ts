// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file server/poll/v1/poll.proto (package server.poll.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from message server.poll.v1.Answer
 */
export class Answer extends Message<Answer> {
  /**
   * @generated from field: string answer = 1;
   */
  answer = "";

  /**
   * @generated from field: bool correct = 2;
   */
  correct = false;

  /**
   * @generated from field: bool lie = 3;
   */
  lie = false;

  constructor(data?: PartialMessage<Answer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.Answer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "answer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "correct", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "lie", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Answer {
    return new Answer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Answer {
    return new Answer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Answer {
    return new Answer().fromJsonString(jsonString, options);
  }

  static equals(a: Answer | PlainMessage<Answer> | undefined, b: Answer | PlainMessage<Answer> | undefined): boolean {
    return proto3.util.equals(Answer, a, b);
  }
}

/**
 * @generated from message server.poll.v1.QuestionAndAnswers
 */
export class QuestionAndAnswers extends Message<QuestionAndAnswers> {
  /**
   * @generated from field: string Question = 1;
   */
  Question = "";

  /**
   * @generated from field: repeated server.poll.v1.Answer Answers = 2;
   */
  Answers: Answer[] = [];

  constructor(data?: PartialMessage<QuestionAndAnswers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.QuestionAndAnswers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Question", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Answers", kind: "message", T: Answer, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QuestionAndAnswers {
    return new QuestionAndAnswers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QuestionAndAnswers {
    return new QuestionAndAnswers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QuestionAndAnswers {
    return new QuestionAndAnswers().fromJsonString(jsonString, options);
  }

  static equals(a: QuestionAndAnswers | PlainMessage<QuestionAndAnswers> | undefined, b: QuestionAndAnswers | PlainMessage<QuestionAndAnswers> | undefined): boolean {
    return proto3.util.equals(QuestionAndAnswers, a, b);
  }
}

/**
 * @generated from message server.poll.v1.GameRoomCreateEventMessage
 */
export class GameRoomCreateEventMessage extends Message<GameRoomCreateEventMessage> {
  /**
   * @generated from field: string RoomCode = 1;
   */
  RoomCode = "";

  /**
   * @generated from field: string Game = 2;
   */
  Game = "";

  /**
   * @generated from field: repeated server.poll.v1.QuestionAndAnswers QuestionsAndAnswers = 3;
   */
  QuestionsAndAnswers: QuestionAndAnswers[] = [];

  /**
   * @generated from field: string TimedDuration = 4;
   */
  TimedDuration = "";

  /**
   * @generated from field: string Error = 5;
   */
  Error = "";

  constructor(data?: PartialMessage<GameRoomCreateEventMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.GameRoomCreateEventMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "RoomCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Game", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "QuestionsAndAnswers", kind: "message", T: QuestionAndAnswers, repeated: true },
    { no: 4, name: "TimedDuration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "Error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameRoomCreateEventMessage {
    return new GameRoomCreateEventMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameRoomCreateEventMessage {
    return new GameRoomCreateEventMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameRoomCreateEventMessage {
    return new GameRoomCreateEventMessage().fromJsonString(jsonString, options);
  }

  static equals(a: GameRoomCreateEventMessage | PlainMessage<GameRoomCreateEventMessage> | undefined, b: GameRoomCreateEventMessage | PlainMessage<GameRoomCreateEventMessage> | undefined): boolean {
    return proto3.util.equals(GameRoomCreateEventMessage, a, b);
  }
}

/**
 * @generated from message server.poll.v1.StartVotingEventMessage
 */
export class StartVotingEventMessage extends Message<StartVotingEventMessage> {
  /**
   * @generated from field: string RoomCode = 1;
   */
  RoomCode = "";

  /**
   * @generated from field: string Game = 2;
   */
  Game = "";

  /**
   * @generated from field: repeated string Participants = 3;
   */
  Participants: string[] = [];

  /**
   * @generated from field: repeated string AudienceList = 4;
   */
  AudienceList: string[] = [];

  /**
   * @generated from field: bool VotingClosed = 5;
   */
  VotingClosed = false;

  /**
   * @generated from field: bool VotingStarted = 6;
   */
  VotingStarted = false;

  /**
   * @generated from field: google.protobuf.Timestamp VotingStartTime = 7;
   */
  VotingStartTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp VotingEndTime = 8;
   */
  VotingEndTime?: Timestamp;

  /**
   * @generated from field: string TimedDuration = 9;
   */
  TimedDuration = "";

  constructor(data?: PartialMessage<StartVotingEventMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.StartVotingEventMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "RoomCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Game", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Participants", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "AudienceList", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "VotingClosed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "VotingStarted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "VotingStartTime", kind: "message", T: Timestamp },
    { no: 8, name: "VotingEndTime", kind: "message", T: Timestamp },
    { no: 9, name: "TimedDuration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartVotingEventMessage {
    return new StartVotingEventMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartVotingEventMessage {
    return new StartVotingEventMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartVotingEventMessage {
    return new StartVotingEventMessage().fromJsonString(jsonString, options);
  }

  static equals(a: StartVotingEventMessage | PlainMessage<StartVotingEventMessage> | undefined, b: StartVotingEventMessage | PlainMessage<StartVotingEventMessage> | undefined): boolean {
    return proto3.util.equals(StartVotingEventMessage, a, b);
  }
}

/**
 * @generated from message server.poll.v1.ParticipantAudienceJoinEventMessage
 */
export class ParticipantAudienceJoinEventMessage extends Message<ParticipantAudienceJoinEventMessage> {
  /**
   * @generated from field: string RoomCode = 1;
   */
  RoomCode = "";

  /**
   * @generated from field: string Game = 2;
   */
  Game = "";

  /**
   * @generated from field: string Nickname = 3;
   */
  Nickname = "";

  /**
   * @generated from field: bool Participant = 4;
   */
  Participant = false;

  /**
   * @generated from field: bool Audience = 5;
   */
  Audience = false;

  /**
   * @generated from field: string Error = 6;
   */
  Error = "";

  constructor(data?: PartialMessage<ParticipantAudienceJoinEventMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.ParticipantAudienceJoinEventMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "RoomCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Game", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Nickname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Participant", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "Audience", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "Error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantAudienceJoinEventMessage {
    return new ParticipantAudienceJoinEventMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantAudienceJoinEventMessage {
    return new ParticipantAudienceJoinEventMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantAudienceJoinEventMessage {
    return new ParticipantAudienceJoinEventMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantAudienceJoinEventMessage | PlainMessage<ParticipantAudienceJoinEventMessage> | undefined, b: ParticipantAudienceJoinEventMessage | PlainMessage<ParticipantAudienceJoinEventMessage> | undefined): boolean {
    return proto3.util.equals(ParticipantAudienceJoinEventMessage, a, b);
  }
}

/**
 * @generated from message server.poll.v1.Vote
 */
export class Vote extends Message<Vote> {
  /**
   * @generated from field: uint32 QuestionNumber = 1;
   */
  QuestionNumber = 0;

  /**
   * @generated from field: repeated uint32 ParticipantAnswers = 2;
   */
  ParticipantAnswers: number[] = [];

  /**
   * @generated from field: string ParticipantName = 3;
   */
  ParticipantName = "";

  /**
   * @generated from field: string ParticipantHat = 4;
   */
  ParticipantHat = "";

  constructor(data?: PartialMessage<Vote>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.Vote";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "QuestionNumber", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "ParticipantAnswers", kind: "scalar", T: 13 /* ScalarType.UINT32 */, repeated: true },
    { no: 3, name: "ParticipantName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "ParticipantHat", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Vote {
    return new Vote().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Vote {
    return new Vote().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Vote {
    return new Vote().fromJsonString(jsonString, options);
  }

  static equals(a: Vote | PlainMessage<Vote> | undefined, b: Vote | PlainMessage<Vote> | undefined): boolean {
    return proto3.util.equals(Vote, a, b);
  }
}

/**
 * @generated from message server.poll.v1.ParticipantVoteEventMessage
 */
export class ParticipantVoteEventMessage extends Message<ParticipantVoteEventMessage> {
  /**
   * @generated from field: string RoomCode = 1;
   */
  RoomCode = "";

  /**
   * @generated from field: string Game = 2;
   */
  Game = "";

  /**
   * @generated from field: server.poll.v1.Vote Vote = 3;
   */
  Vote?: Vote;

  /**
   * @generated from field: string Error = 4;
   */
  Error = "";

  constructor(data?: PartialMessage<ParticipantVoteEventMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.ParticipantVoteEventMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "RoomCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Game", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Vote", kind: "message", T: Vote },
    { no: 4, name: "Error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantVoteEventMessage {
    return new ParticipantVoteEventMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantVoteEventMessage {
    return new ParticipantVoteEventMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantVoteEventMessage {
    return new ParticipantVoteEventMessage().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantVoteEventMessage | PlainMessage<ParticipantVoteEventMessage> | undefined, b: ParticipantVoteEventMessage | PlainMessage<ParticipantVoteEventMessage> | undefined): boolean {
    return proto3.util.equals(ParticipantVoteEventMessage, a, b);
  }
}

/**
 * @generated from message server.poll.v1.SubscribeRequestMessage
 */
export class SubscribeRequestMessage extends Message<SubscribeRequestMessage> {
  /**
   * @generated from field: string RoomCode = 1;
   */
  RoomCode = "";

  /**
   * @generated from field: string Game = 2;
   */
  Game = "";

  /**
   * @generated from field: string Nickname = 3;
   */
  Nickname = "";

  /**
   * @generated from field: bool Participant = 4;
   */
  Participant = false;

  /**
   * @generated from field: bool Audience = 5;
   */
  Audience = false;

  /**
   * @generated from field: string Error = 6;
   */
  Error = "";

  constructor(data?: PartialMessage<SubscribeRequestMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.SubscribeRequestMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "RoomCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Game", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Nickname", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "Participant", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "Audience", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "Error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeRequestMessage {
    return new SubscribeRequestMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeRequestMessage {
    return new SubscribeRequestMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeRequestMessage {
    return new SubscribeRequestMessage().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeRequestMessage | PlainMessage<SubscribeRequestMessage> | undefined, b: SubscribeRequestMessage | PlainMessage<SubscribeRequestMessage> | undefined): boolean {
    return proto3.util.equals(SubscribeRequestMessage, a, b);
  }
}

/**
 * @generated from message server.poll.v1.UpdateResultsMessage
 */
export class UpdateResultsMessage extends Message<UpdateResultsMessage> {
  /**
   * @generated from field: string RoomCode = 1;
   */
  RoomCode = "";

  /**
   * @generated from field: string Game = 2;
   */
  Game = "";

  /**
   * @generated from field: repeated server.poll.v1.Vote Votes = 3;
   */
  Votes: Vote[] = [];

  /**
   * @generated from field: repeated string Participants = 4;
   */
  Participants: string[] = [];

  /**
   * @generated from field: repeated string AudienceList = 5;
   */
  AudienceList: string[] = [];

  /**
   * @generated from field: repeated server.poll.v1.QuestionAndAnswers QuestionsAndAnswers = 6;
   */
  QuestionsAndAnswers: QuestionAndAnswers[] = [];

  /**
   * @generated from field: bool VotingClosed = 7;
   */
  VotingClosed = false;

  /**
   * @generated from field: bool VotingStarted = 8;
   */
  VotingStarted = false;

  /**
   * @generated from field: google.protobuf.Timestamp VotingStartTime = 9;
   */
  VotingStartTime?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp VotingEndTime = 10;
   */
  VotingEndTime?: Timestamp;

  /**
   * @generated from field: string TimedDuration = 11;
   */
  TimedDuration = "";

  /**
   * @generated from field: string DurationRemaining = 12;
   */
  DurationRemaining = "";

  /**
   * @generated from field: string Error = 13;
   */
  Error = "";

  constructor(data?: PartialMessage<UpdateResultsMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.UpdateResultsMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "RoomCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Game", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "Votes", kind: "message", T: Vote, repeated: true },
    { no: 4, name: "Participants", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "AudienceList", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "QuestionsAndAnswers", kind: "message", T: QuestionAndAnswers, repeated: true },
    { no: 7, name: "VotingClosed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "VotingStarted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "VotingStartTime", kind: "message", T: Timestamp },
    { no: 10, name: "VotingEndTime", kind: "message", T: Timestamp },
    { no: 11, name: "TimedDuration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "DurationRemaining", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 13, name: "Error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateResultsMessage {
    return new UpdateResultsMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateResultsMessage {
    return new UpdateResultsMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateResultsMessage {
    return new UpdateResultsMessage().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateResultsMessage | PlainMessage<UpdateResultsMessage> | undefined, b: UpdateResultsMessage | PlainMessage<UpdateResultsMessage> | undefined): boolean {
    return proto3.util.equals(UpdateResultsMessage, a, b);
  }
}

/**
 * @generated from message server.poll.v1.EndVotingEventMessage
 */
export class EndVotingEventMessage extends Message<EndVotingEventMessage> {
  /**
   * @generated from field: string RoomCode = 1;
   */
  RoomCode = "";

  /**
   * @generated from field: string Game = 2;
   */
  Game = "";

  /**
   * @generated from field: bool VotingClosed = 3;
   */
  VotingClosed = false;

  /**
   * @generated from field: google.protobuf.Timestamp VotingEndTime = 4;
   */
  VotingEndTime?: Timestamp;

  constructor(data?: PartialMessage<EndVotingEventMessage>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.EndVotingEventMessage";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "RoomCode", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "Game", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "VotingClosed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "VotingEndTime", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndVotingEventMessage {
    return new EndVotingEventMessage().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndVotingEventMessage {
    return new EndVotingEventMessage().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndVotingEventMessage {
    return new EndVotingEventMessage().fromJsonString(jsonString, options);
  }

  static equals(a: EndVotingEventMessage | PlainMessage<EndVotingEventMessage> | undefined, b: EndVotingEventMessage | PlainMessage<EndVotingEventMessage> | undefined): boolean {
    return proto3.util.equals(EndVotingEventMessage, a, b);
  }
}

/**
 * @generated from message server.poll.v1.ParticipantAudienceJoinResponse
 */
export class ParticipantAudienceJoinResponse extends Message<ParticipantAudienceJoinResponse> {
  /**
   * @generated from field: server.poll.v1.UpdateResultsMessage updateResultsMessage = 1;
   */
  updateResultsMessage?: UpdateResultsMessage;

  constructor(data?: PartialMessage<ParticipantAudienceJoinResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.ParticipantAudienceJoinResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updateResultsMessage", kind: "message", T: UpdateResultsMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantAudienceJoinResponse {
    return new ParticipantAudienceJoinResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantAudienceJoinResponse {
    return new ParticipantAudienceJoinResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantAudienceJoinResponse {
    return new ParticipantAudienceJoinResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantAudienceJoinResponse | PlainMessage<ParticipantAudienceJoinResponse> | undefined, b: ParticipantAudienceJoinResponse | PlainMessage<ParticipantAudienceJoinResponse> | undefined): boolean {
    return proto3.util.equals(ParticipantAudienceJoinResponse, a, b);
  }
}

/**
 * @generated from message server.poll.v1.ParticipantVoteResponse
 */
export class ParticipantVoteResponse extends Message<ParticipantVoteResponse> {
  /**
   * @generated from field: server.poll.v1.UpdateResultsMessage updateResultsMessage = 1;
   */
  updateResultsMessage?: UpdateResultsMessage;

  constructor(data?: PartialMessage<ParticipantVoteResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.ParticipantVoteResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updateResultsMessage", kind: "message", T: UpdateResultsMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParticipantVoteResponse {
    return new ParticipantVoteResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParticipantVoteResponse {
    return new ParticipantVoteResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParticipantVoteResponse {
    return new ParticipantVoteResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ParticipantVoteResponse | PlainMessage<ParticipantVoteResponse> | undefined, b: ParticipantVoteResponse | PlainMessage<ParticipantVoteResponse> | undefined): boolean {
    return proto3.util.equals(ParticipantVoteResponse, a, b);
  }
}

/**
 * @generated from message server.poll.v1.GameRoomCreateResponse
 */
export class GameRoomCreateResponse extends Message<GameRoomCreateResponse> {
  /**
   * @generated from field: server.poll.v1.UpdateResultsMessage updateResultsMessage = 1;
   */
  updateResultsMessage?: UpdateResultsMessage;

  constructor(data?: PartialMessage<GameRoomCreateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.GameRoomCreateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updateResultsMessage", kind: "message", T: UpdateResultsMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GameRoomCreateResponse {
    return new GameRoomCreateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GameRoomCreateResponse {
    return new GameRoomCreateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GameRoomCreateResponse {
    return new GameRoomCreateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GameRoomCreateResponse | PlainMessage<GameRoomCreateResponse> | undefined, b: GameRoomCreateResponse | PlainMessage<GameRoomCreateResponse> | undefined): boolean {
    return proto3.util.equals(GameRoomCreateResponse, a, b);
  }
}

/**
 * @generated from message server.poll.v1.StartVotingResponse
 */
export class StartVotingResponse extends Message<StartVotingResponse> {
  /**
   * @generated from field: server.poll.v1.UpdateResultsMessage updateResultsMessage = 1;
   */
  updateResultsMessage?: UpdateResultsMessage;

  constructor(data?: PartialMessage<StartVotingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.StartVotingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updateResultsMessage", kind: "message", T: UpdateResultsMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StartVotingResponse {
    return new StartVotingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StartVotingResponse {
    return new StartVotingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StartVotingResponse {
    return new StartVotingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: StartVotingResponse | PlainMessage<StartVotingResponse> | undefined, b: StartVotingResponse | PlainMessage<StartVotingResponse> | undefined): boolean {
    return proto3.util.equals(StartVotingResponse, a, b);
  }
}

/**
 * @generated from message server.poll.v1.EndVotingResponse
 */
export class EndVotingResponse extends Message<EndVotingResponse> {
  /**
   * @generated from field: server.poll.v1.UpdateResultsMessage updateResultsMessage = 1;
   */
  updateResultsMessage?: UpdateResultsMessage;

  constructor(data?: PartialMessage<EndVotingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.EndVotingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updateResultsMessage", kind: "message", T: UpdateResultsMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EndVotingResponse {
    return new EndVotingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EndVotingResponse {
    return new EndVotingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EndVotingResponse {
    return new EndVotingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EndVotingResponse | PlainMessage<EndVotingResponse> | undefined, b: EndVotingResponse | PlainMessage<EndVotingResponse> | undefined): boolean {
    return proto3.util.equals(EndVotingResponse, a, b);
  }
}

/**
 * @generated from message server.poll.v1.SubscribeResponse
 */
export class SubscribeResponse extends Message<SubscribeResponse> {
  /**
   * @generated from field: server.poll.v1.UpdateResultsMessage updateResultsMessage = 1;
   */
  updateResultsMessage?: UpdateResultsMessage;

  constructor(data?: PartialMessage<SubscribeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "server.poll.v1.SubscribeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "updateResultsMessage", kind: "message", T: UpdateResultsMessage },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SubscribeResponse {
    return new SubscribeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SubscribeResponse {
    return new SubscribeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SubscribeResponse {
    return new SubscribeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SubscribeResponse | PlainMessage<SubscribeResponse> | undefined, b: SubscribeResponse | PlainMessage<SubscribeResponse> | undefined): boolean {
    return proto3.util.equals(SubscribeResponse, a, b);
  }
}

