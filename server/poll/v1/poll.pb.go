// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        (unknown)
// source: server/poll/v1/poll.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Answer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Answer  string `protobuf:"bytes,1,opt,name=answer,proto3" json:"answer,omitempty"`
	Correct bool   `protobuf:"varint,2,opt,name=correct,proto3" json:"correct,omitempty"`
	Lie     bool   `protobuf:"varint,3,opt,name=lie,proto3" json:"lie,omitempty"`
}

func (x *Answer) Reset() {
	*x = Answer{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Answer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Answer) ProtoMessage() {}

func (x *Answer) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Answer.ProtoReflect.Descriptor instead.
func (*Answer) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{0}
}

func (x *Answer) GetAnswer() string {
	if x != nil {
		return x.Answer
	}
	return ""
}

func (x *Answer) GetCorrect() bool {
	if x != nil {
		return x.Correct
	}
	return false
}

func (x *Answer) GetLie() bool {
	if x != nil {
		return x.Lie
	}
	return false
}

type QuestionAndAnswers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Question string    `protobuf:"bytes,1,opt,name=Question,proto3" json:"Question,omitempty"`
	Answers  []*Answer `protobuf:"bytes,2,rep,name=Answers,proto3" json:"Answers,omitempty"`
}

func (x *QuestionAndAnswers) Reset() {
	*x = QuestionAndAnswers{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuestionAndAnswers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuestionAndAnswers) ProtoMessage() {}

func (x *QuestionAndAnswers) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuestionAndAnswers.ProtoReflect.Descriptor instead.
func (*QuestionAndAnswers) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{1}
}

func (x *QuestionAndAnswers) GetQuestion() string {
	if x != nil {
		return x.Question
	}
	return ""
}

func (x *QuestionAndAnswers) GetAnswers() []*Answer {
	if x != nil {
		return x.Answers
	}
	return nil
}

type GameRoomCreateEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomCode            string                `protobuf:"bytes,1,opt,name=RoomCode,proto3" json:"RoomCode,omitempty"`
	Game                string                `protobuf:"bytes,2,opt,name=Game,proto3" json:"Game,omitempty"`
	QuestionsAndAnswers []*QuestionAndAnswers `protobuf:"bytes,3,rep,name=QuestionsAndAnswers,proto3" json:"QuestionsAndAnswers,omitempty"`
	TimedDuration       string                `protobuf:"bytes,4,opt,name=TimedDuration,proto3" json:"TimedDuration,omitempty"`
	Error               string                `protobuf:"bytes,5,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *GameRoomCreateEventMessage) Reset() {
	*x = GameRoomCreateEventMessage{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameRoomCreateEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRoomCreateEventMessage) ProtoMessage() {}

func (x *GameRoomCreateEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRoomCreateEventMessage.ProtoReflect.Descriptor instead.
func (*GameRoomCreateEventMessage) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{2}
}

func (x *GameRoomCreateEventMessage) GetRoomCode() string {
	if x != nil {
		return x.RoomCode
	}
	return ""
}

func (x *GameRoomCreateEventMessage) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *GameRoomCreateEventMessage) GetQuestionsAndAnswers() []*QuestionAndAnswers {
	if x != nil {
		return x.QuestionsAndAnswers
	}
	return nil
}

func (x *GameRoomCreateEventMessage) GetTimedDuration() string {
	if x != nil {
		return x.TimedDuration
	}
	return ""
}

func (x *GameRoomCreateEventMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type StartVotingEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomCode        string                 `protobuf:"bytes,1,opt,name=RoomCode,proto3" json:"RoomCode,omitempty"`
	Game            string                 `protobuf:"bytes,2,opt,name=Game,proto3" json:"Game,omitempty"`
	Participants    []string               `protobuf:"bytes,3,rep,name=Participants,proto3" json:"Participants,omitempty"`
	AudienceList    []string               `protobuf:"bytes,4,rep,name=AudienceList,proto3" json:"AudienceList,omitempty"`
	VotingClosed    bool                   `protobuf:"varint,5,opt,name=VotingClosed,proto3" json:"VotingClosed,omitempty"`
	VotingStarted   bool                   `protobuf:"varint,6,opt,name=VotingStarted,proto3" json:"VotingStarted,omitempty"`
	VotingStartTime *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=VotingStartTime,proto3" json:"VotingStartTime,omitempty"`
	VotingEndTime   *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=VotingEndTime,proto3" json:"VotingEndTime,omitempty"`
	TimedDuration   string                 `protobuf:"bytes,9,opt,name=TimedDuration,proto3" json:"TimedDuration,omitempty"`
}

func (x *StartVotingEventMessage) Reset() {
	*x = StartVotingEventMessage{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartVotingEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVotingEventMessage) ProtoMessage() {}

func (x *StartVotingEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVotingEventMessage.ProtoReflect.Descriptor instead.
func (*StartVotingEventMessage) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{3}
}

func (x *StartVotingEventMessage) GetRoomCode() string {
	if x != nil {
		return x.RoomCode
	}
	return ""
}

func (x *StartVotingEventMessage) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *StartVotingEventMessage) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *StartVotingEventMessage) GetAudienceList() []string {
	if x != nil {
		return x.AudienceList
	}
	return nil
}

func (x *StartVotingEventMessage) GetVotingClosed() bool {
	if x != nil {
		return x.VotingClosed
	}
	return false
}

func (x *StartVotingEventMessage) GetVotingStarted() bool {
	if x != nil {
		return x.VotingStarted
	}
	return false
}

func (x *StartVotingEventMessage) GetVotingStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingStartTime
	}
	return nil
}

func (x *StartVotingEventMessage) GetVotingEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingEndTime
	}
	return nil
}

func (x *StartVotingEventMessage) GetTimedDuration() string {
	if x != nil {
		return x.TimedDuration
	}
	return ""
}

type ParticipantAudienceJoinEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomCode    string `protobuf:"bytes,1,opt,name=RoomCode,proto3" json:"RoomCode,omitempty"`
	Game        string `protobuf:"bytes,2,opt,name=Game,proto3" json:"Game,omitempty"`
	Nickname    string `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Participant bool   `protobuf:"varint,4,opt,name=Participant,proto3" json:"Participant,omitempty"`
	Audience    bool   `protobuf:"varint,5,opt,name=Audience,proto3" json:"Audience,omitempty"`
	Error       string `protobuf:"bytes,6,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *ParticipantAudienceJoinEventMessage) Reset() {
	*x = ParticipantAudienceJoinEventMessage{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantAudienceJoinEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantAudienceJoinEventMessage) ProtoMessage() {}

func (x *ParticipantAudienceJoinEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantAudienceJoinEventMessage.ProtoReflect.Descriptor instead.
func (*ParticipantAudienceJoinEventMessage) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{4}
}

func (x *ParticipantAudienceJoinEventMessage) GetRoomCode() string {
	if x != nil {
		return x.RoomCode
	}
	return ""
}

func (x *ParticipantAudienceJoinEventMessage) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *ParticipantAudienceJoinEventMessage) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *ParticipantAudienceJoinEventMessage) GetParticipant() bool {
	if x != nil {
		return x.Participant
	}
	return false
}

func (x *ParticipantAudienceJoinEventMessage) GetAudience() bool {
	if x != nil {
		return x.Audience
	}
	return false
}

func (x *ParticipantAudienceJoinEventMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type Vote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QuestionNumber     uint32   `protobuf:"varint,1,opt,name=QuestionNumber,proto3" json:"QuestionNumber,omitempty"`
	ParticipantAnswers []uint32 `protobuf:"varint,2,rep,packed,name=ParticipantAnswers,proto3" json:"ParticipantAnswers,omitempty"`
	ParticipantName    string   `protobuf:"bytes,3,opt,name=ParticipantName,proto3" json:"ParticipantName,omitempty"`
	ParticipantHat     string   `protobuf:"bytes,4,opt,name=ParticipantHat,proto3" json:"ParticipantHat,omitempty"`
}

func (x *Vote) Reset() {
	*x = Vote{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Vote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vote) ProtoMessage() {}

func (x *Vote) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vote.ProtoReflect.Descriptor instead.
func (*Vote) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{5}
}

func (x *Vote) GetQuestionNumber() uint32 {
	if x != nil {
		return x.QuestionNumber
	}
	return 0
}

func (x *Vote) GetParticipantAnswers() []uint32 {
	if x != nil {
		return x.ParticipantAnswers
	}
	return nil
}

func (x *Vote) GetParticipantName() string {
	if x != nil {
		return x.ParticipantName
	}
	return ""
}

func (x *Vote) GetParticipantHat() string {
	if x != nil {
		return x.ParticipantHat
	}
	return ""
}

type ParticipantVoteEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomCode string `protobuf:"bytes,1,opt,name=RoomCode,proto3" json:"RoomCode,omitempty"`
	Game     string `protobuf:"bytes,2,opt,name=Game,proto3" json:"Game,omitempty"`
	Vote     *Vote  `protobuf:"bytes,3,opt,name=Vote,proto3" json:"Vote,omitempty"`
	Error    string `protobuf:"bytes,4,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *ParticipantVoteEventMessage) Reset() {
	*x = ParticipantVoteEventMessage{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantVoteEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantVoteEventMessage) ProtoMessage() {}

func (x *ParticipantVoteEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantVoteEventMessage.ProtoReflect.Descriptor instead.
func (*ParticipantVoteEventMessage) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{6}
}

func (x *ParticipantVoteEventMessage) GetRoomCode() string {
	if x != nil {
		return x.RoomCode
	}
	return ""
}

func (x *ParticipantVoteEventMessage) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *ParticipantVoteEventMessage) GetVote() *Vote {
	if x != nil {
		return x.Vote
	}
	return nil
}

func (x *ParticipantVoteEventMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type SubscribeRequestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomCode    string `protobuf:"bytes,1,opt,name=RoomCode,proto3" json:"RoomCode,omitempty"`
	Game        string `protobuf:"bytes,2,opt,name=Game,proto3" json:"Game,omitempty"`
	Nickname    string `protobuf:"bytes,3,opt,name=Nickname,proto3" json:"Nickname,omitempty"`
	Participant bool   `protobuf:"varint,4,opt,name=Participant,proto3" json:"Participant,omitempty"`
	Audience    bool   `protobuf:"varint,5,opt,name=Audience,proto3" json:"Audience,omitempty"`
	Error       string `protobuf:"bytes,6,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *SubscribeRequestMessage) Reset() {
	*x = SubscribeRequestMessage{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeRequestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequestMessage) ProtoMessage() {}

func (x *SubscribeRequestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequestMessage.ProtoReflect.Descriptor instead.
func (*SubscribeRequestMessage) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{7}
}

func (x *SubscribeRequestMessage) GetRoomCode() string {
	if x != nil {
		return x.RoomCode
	}
	return ""
}

func (x *SubscribeRequestMessage) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *SubscribeRequestMessage) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *SubscribeRequestMessage) GetParticipant() bool {
	if x != nil {
		return x.Participant
	}
	return false
}

func (x *SubscribeRequestMessage) GetAudience() bool {
	if x != nil {
		return x.Audience
	}
	return false
}

func (x *SubscribeRequestMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type UpdateResultsMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomCode            string                 `protobuf:"bytes,1,opt,name=RoomCode,proto3" json:"RoomCode,omitempty"`
	Game                string                 `protobuf:"bytes,2,opt,name=Game,proto3" json:"Game,omitempty"`
	Votes               []*Vote                `protobuf:"bytes,3,rep,name=Votes,proto3" json:"Votes,omitempty"`
	Participants        []string               `protobuf:"bytes,4,rep,name=Participants,proto3" json:"Participants,omitempty"`
	AudienceList        []string               `protobuf:"bytes,5,rep,name=AudienceList,proto3" json:"AudienceList,omitempty"`
	QuestionsAndAnswers []*QuestionAndAnswers  `protobuf:"bytes,6,rep,name=QuestionsAndAnswers,proto3" json:"QuestionsAndAnswers,omitempty"`
	VotingClosed        bool                   `protobuf:"varint,7,opt,name=VotingClosed,proto3" json:"VotingClosed,omitempty"`
	VotingStarted       bool                   `protobuf:"varint,8,opt,name=VotingStarted,proto3" json:"VotingStarted,omitempty"`
	VotingStartTime     *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=VotingStartTime,proto3" json:"VotingStartTime,omitempty"`
	VotingEndTime       *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=VotingEndTime,proto3" json:"VotingEndTime,omitempty"`
	TimedDuration       string                 `protobuf:"bytes,11,opt,name=TimedDuration,proto3" json:"TimedDuration,omitempty"`
	DurationRemaining   string                 `protobuf:"bytes,12,opt,name=DurationRemaining,proto3" json:"DurationRemaining,omitempty"`
	Error               string                 `protobuf:"bytes,13,opt,name=Error,proto3" json:"Error,omitempty"`
}

func (x *UpdateResultsMessage) Reset() {
	*x = UpdateResultsMessage{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpdateResultsMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateResultsMessage) ProtoMessage() {}

func (x *UpdateResultsMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateResultsMessage.ProtoReflect.Descriptor instead.
func (*UpdateResultsMessage) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{8}
}

func (x *UpdateResultsMessage) GetRoomCode() string {
	if x != nil {
		return x.RoomCode
	}
	return ""
}

func (x *UpdateResultsMessage) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *UpdateResultsMessage) GetVotes() []*Vote {
	if x != nil {
		return x.Votes
	}
	return nil
}

func (x *UpdateResultsMessage) GetParticipants() []string {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *UpdateResultsMessage) GetAudienceList() []string {
	if x != nil {
		return x.AudienceList
	}
	return nil
}

func (x *UpdateResultsMessage) GetQuestionsAndAnswers() []*QuestionAndAnswers {
	if x != nil {
		return x.QuestionsAndAnswers
	}
	return nil
}

func (x *UpdateResultsMessage) GetVotingClosed() bool {
	if x != nil {
		return x.VotingClosed
	}
	return false
}

func (x *UpdateResultsMessage) GetVotingStarted() bool {
	if x != nil {
		return x.VotingStarted
	}
	return false
}

func (x *UpdateResultsMessage) GetVotingStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingStartTime
	}
	return nil
}

func (x *UpdateResultsMessage) GetVotingEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingEndTime
	}
	return nil
}

func (x *UpdateResultsMessage) GetTimedDuration() string {
	if x != nil {
		return x.TimedDuration
	}
	return ""
}

func (x *UpdateResultsMessage) GetDurationRemaining() string {
	if x != nil {
		return x.DurationRemaining
	}
	return ""
}

func (x *UpdateResultsMessage) GetError() string {
	if x != nil {
		return x.Error
	}
	return ""
}

type EndVotingEventMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RoomCode      string                 `protobuf:"bytes,1,opt,name=RoomCode,proto3" json:"RoomCode,omitempty"`
	Game          string                 `protobuf:"bytes,2,opt,name=Game,proto3" json:"Game,omitempty"`
	VotingClosed  bool                   `protobuf:"varint,3,opt,name=VotingClosed,proto3" json:"VotingClosed,omitempty"`
	VotingEndTime *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=VotingEndTime,proto3" json:"VotingEndTime,omitempty"`
}

func (x *EndVotingEventMessage) Reset() {
	*x = EndVotingEventMessage{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndVotingEventMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndVotingEventMessage) ProtoMessage() {}

func (x *EndVotingEventMessage) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndVotingEventMessage.ProtoReflect.Descriptor instead.
func (*EndVotingEventMessage) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{9}
}

func (x *EndVotingEventMessage) GetRoomCode() string {
	if x != nil {
		return x.RoomCode
	}
	return ""
}

func (x *EndVotingEventMessage) GetGame() string {
	if x != nil {
		return x.Game
	}
	return ""
}

func (x *EndVotingEventMessage) GetVotingClosed() bool {
	if x != nil {
		return x.VotingClosed
	}
	return false
}

func (x *EndVotingEventMessage) GetVotingEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.VotingEndTime
	}
	return nil
}

type ParticipantAudienceJoinResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateResultsMessage *UpdateResultsMessage `protobuf:"bytes,1,opt,name=updateResultsMessage,proto3" json:"updateResultsMessage,omitempty"`
}

func (x *ParticipantAudienceJoinResponse) Reset() {
	*x = ParticipantAudienceJoinResponse{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantAudienceJoinResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantAudienceJoinResponse) ProtoMessage() {}

func (x *ParticipantAudienceJoinResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantAudienceJoinResponse.ProtoReflect.Descriptor instead.
func (*ParticipantAudienceJoinResponse) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{10}
}

func (x *ParticipantAudienceJoinResponse) GetUpdateResultsMessage() *UpdateResultsMessage {
	if x != nil {
		return x.UpdateResultsMessage
	}
	return nil
}

type ParticipantVoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateResultsMessage *UpdateResultsMessage `protobuf:"bytes,1,opt,name=updateResultsMessage,proto3" json:"updateResultsMessage,omitempty"`
}

func (x *ParticipantVoteResponse) Reset() {
	*x = ParticipantVoteResponse{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ParticipantVoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ParticipantVoteResponse) ProtoMessage() {}

func (x *ParticipantVoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ParticipantVoteResponse.ProtoReflect.Descriptor instead.
func (*ParticipantVoteResponse) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{11}
}

func (x *ParticipantVoteResponse) GetUpdateResultsMessage() *UpdateResultsMessage {
	if x != nil {
		return x.UpdateResultsMessage
	}
	return nil
}

type GameRoomCreateResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateResultsMessage *UpdateResultsMessage `protobuf:"bytes,1,opt,name=updateResultsMessage,proto3" json:"updateResultsMessage,omitempty"`
}

func (x *GameRoomCreateResponse) Reset() {
	*x = GameRoomCreateResponse{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GameRoomCreateResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameRoomCreateResponse) ProtoMessage() {}

func (x *GameRoomCreateResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameRoomCreateResponse.ProtoReflect.Descriptor instead.
func (*GameRoomCreateResponse) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{12}
}

func (x *GameRoomCreateResponse) GetUpdateResultsMessage() *UpdateResultsMessage {
	if x != nil {
		return x.UpdateResultsMessage
	}
	return nil
}

type StartVotingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateResultsMessage *UpdateResultsMessage `protobuf:"bytes,1,opt,name=updateResultsMessage,proto3" json:"updateResultsMessage,omitempty"`
}

func (x *StartVotingResponse) Reset() {
	*x = StartVotingResponse{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartVotingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartVotingResponse) ProtoMessage() {}

func (x *StartVotingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartVotingResponse.ProtoReflect.Descriptor instead.
func (*StartVotingResponse) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{13}
}

func (x *StartVotingResponse) GetUpdateResultsMessage() *UpdateResultsMessage {
	if x != nil {
		return x.UpdateResultsMessage
	}
	return nil
}

type EndVotingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateResultsMessage *UpdateResultsMessage `protobuf:"bytes,1,opt,name=updateResultsMessage,proto3" json:"updateResultsMessage,omitempty"`
}

func (x *EndVotingResponse) Reset() {
	*x = EndVotingResponse{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndVotingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndVotingResponse) ProtoMessage() {}

func (x *EndVotingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndVotingResponse.ProtoReflect.Descriptor instead.
func (*EndVotingResponse) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{14}
}

func (x *EndVotingResponse) GetUpdateResultsMessage() *UpdateResultsMessage {
	if x != nil {
		return x.UpdateResultsMessage
	}
	return nil
}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UpdateResultsMessage *UpdateResultsMessage `protobuf:"bytes,1,opt,name=updateResultsMessage,proto3" json:"updateResultsMessage,omitempty"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	mi := &file_server_poll_v1_poll_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_server_poll_v1_poll_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_server_poll_v1_poll_proto_rawDescGZIP(), []int{15}
}

func (x *SubscribeResponse) GetUpdateResultsMessage() *UpdateResultsMessage {
	if x != nil {
		return x.UpdateResultsMessage
	}
	return nil
}

var File_server_poll_v1_poll_proto protoreflect.FileDescriptor

var file_server_poll_v1_poll_proto_rawDesc = []byte{
	0x0a, 0x19, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x2f, 0x76, 0x31,
	0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x4c, 0x0a, 0x06,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x69, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x6c, 0x69, 0x65, 0x22, 0x62, 0x0a, 0x12, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x07,
	0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x52, 0x07, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x22, 0xde,
	0x01, 0x0a, 0x1a, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x54, 0x0a,
	0x13, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x52, 0x13,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77,
	0x65, 0x72, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x69, 0x6d, 0x65,
	0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22,
	0x89, 0x03, 0x0a, 0x17, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x6f,
	0x73, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x44, 0x0a,
	0x0f, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0f, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e,
	0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x64, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x54, 0x69,
	0x6d, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x23,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47,
	0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x22, 0xb0, 0x01, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x12, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x6e, 0x73,
	0x77, 0x65, 0x72, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26,
	0x0a, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x48, 0x61, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x48, 0x61, 0x74, 0x22, 0x8d, 0x01, 0x0a, 0x1b, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f,
	0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x04, 0x56, 0x6f, 0x74, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x22, 0xb9, 0x01, 0x0a, 0x17, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x61,
	0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x12, 0x1a, 0x0a, 0x08, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xcc, 0x04, 0x0a, 0x14, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x05, 0x56,
	0x6f, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x05, 0x56, 0x6f, 0x74, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x50,
	0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x41,
	0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0c, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x54, 0x0a, 0x13, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x41,
	0x6e, 0x73, 0x77, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x51, 0x75,
	0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x6e, 0x64, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x73,
	0x52, 0x13, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x41, 0x6e, 0x64, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x6f, 0x74,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12,
	0x44, 0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x64,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x54, 0x69, 0x6d, 0x65, 0x64, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69,
	0x6e, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x22, 0xad, 0x01, 0x0a, 0x15, 0x45, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x52,
	0x6f, 0x6f, 0x6d, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x64, 0x12,
	0x40, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x22, 0x7b, 0x0a, 0x1f, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74,
	0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x73,
	0x0a, 0x17, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x56, 0x6f, 0x74,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x14, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x14, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x22, 0x72, 0x0a, 0x16, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6f, 0x0a, 0x13, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58,
	0x0a, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x11, 0x45, 0x6e, 0x64, 0x56,
	0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a,
	0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x6d, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x58, 0x0a, 0x14,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x14, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x73, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x32, 0x97, 0x05, 0x0a, 0x0b, 0x50, 0x6f, 0x6c, 0x6c, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x86, 0x01, 0x0a, 0x1e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4a, 0x6f,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x33, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x4a, 0x6f,
	0x69, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x2f,
	0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x41, 0x75, 0x64, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x4a, 0x6f, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6e, 0x0a, 0x16, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x56, 0x6f,
	0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69,
	0x63, 0x69, 0x70, 0x61, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x69, 0x63, 0x69, 0x70,
	0x61, 0x6e, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x6b, 0x0a, 0x15, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f,
	0x6f, 0x6d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x26, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x6f, 0x6d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x62, 0x0a, 0x12,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x23, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x5c, 0x0a, 0x10, 0x45, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x25, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f,
	0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6e, 0x64,
	0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x60,
	0x0a, 0x10, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x27, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x1a, 0x21, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x2e, 0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x30, 0x01,
	0x42, 0xae, 0x01, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x70, 0x6f, 0x6c, 0x6c, 0x2e, 0x76, 0x31, 0x42, 0x09, 0x50, 0x6f, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x50, 0x01, 0x5a, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4b, 0x68, 0x61, 0x6e, 0x2f, 0x68, 0x61, 0x63, 0x6b, 0x61, 0x74, 0x68, 0x6f, 0x6e, 0x2d,
	0x6b, 0x68, 0x61, 0x6e, 0x6d, 0x69, 0x67, 0x6f, 0x67, 0x6f, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x2f, 0x70, 0x6f, 0x6c, 0x6c, 0x2f, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x53, 0x50, 0x58, 0xaa,
	0x02, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x50, 0x6f, 0x6c, 0x6c, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x0e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x50, 0x6f, 0x6c, 0x6c, 0x5c, 0x56,
	0x31, 0xe2, 0x02, 0x1a, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5c, 0x50, 0x6f, 0x6c, 0x6c, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x10, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x3a, 0x3a, 0x50, 0x6f, 0x6c, 0x6c, 0x3a, 0x3a, 0x56,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_server_poll_v1_poll_proto_rawDescOnce sync.Once
	file_server_poll_v1_poll_proto_rawDescData = file_server_poll_v1_poll_proto_rawDesc
)

func file_server_poll_v1_poll_proto_rawDescGZIP() []byte {
	file_server_poll_v1_poll_proto_rawDescOnce.Do(func() {
		file_server_poll_v1_poll_proto_rawDescData = protoimpl.X.CompressGZIP(file_server_poll_v1_poll_proto_rawDescData)
	})
	return file_server_poll_v1_poll_proto_rawDescData
}

var file_server_poll_v1_poll_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_server_poll_v1_poll_proto_goTypes = []any{
	(*Answer)(nil),                              // 0: server.poll.v1.Answer
	(*QuestionAndAnswers)(nil),                  // 1: server.poll.v1.QuestionAndAnswers
	(*GameRoomCreateEventMessage)(nil),          // 2: server.poll.v1.GameRoomCreateEventMessage
	(*StartVotingEventMessage)(nil),             // 3: server.poll.v1.StartVotingEventMessage
	(*ParticipantAudienceJoinEventMessage)(nil), // 4: server.poll.v1.ParticipantAudienceJoinEventMessage
	(*Vote)(nil),                                // 5: server.poll.v1.Vote
	(*ParticipantVoteEventMessage)(nil),         // 6: server.poll.v1.ParticipantVoteEventMessage
	(*SubscribeRequestMessage)(nil),             // 7: server.poll.v1.SubscribeRequestMessage
	(*UpdateResultsMessage)(nil),                // 8: server.poll.v1.UpdateResultsMessage
	(*EndVotingEventMessage)(nil),               // 9: server.poll.v1.EndVotingEventMessage
	(*ParticipantAudienceJoinResponse)(nil),     // 10: server.poll.v1.ParticipantAudienceJoinResponse
	(*ParticipantVoteResponse)(nil),             // 11: server.poll.v1.ParticipantVoteResponse
	(*GameRoomCreateResponse)(nil),              // 12: server.poll.v1.GameRoomCreateResponse
	(*StartVotingResponse)(nil),                 // 13: server.poll.v1.StartVotingResponse
	(*EndVotingResponse)(nil),                   // 14: server.poll.v1.EndVotingResponse
	(*SubscribeResponse)(nil),                   // 15: server.poll.v1.SubscribeResponse
	(*timestamppb.Timestamp)(nil),               // 16: google.protobuf.Timestamp
}
var file_server_poll_v1_poll_proto_depIdxs = []int32{
	0,  // 0: server.poll.v1.QuestionAndAnswers.Answers:type_name -> server.poll.v1.Answer
	1,  // 1: server.poll.v1.GameRoomCreateEventMessage.QuestionsAndAnswers:type_name -> server.poll.v1.QuestionAndAnswers
	16, // 2: server.poll.v1.StartVotingEventMessage.VotingStartTime:type_name -> google.protobuf.Timestamp
	16, // 3: server.poll.v1.StartVotingEventMessage.VotingEndTime:type_name -> google.protobuf.Timestamp
	5,  // 4: server.poll.v1.ParticipantVoteEventMessage.Vote:type_name -> server.poll.v1.Vote
	5,  // 5: server.poll.v1.UpdateResultsMessage.Votes:type_name -> server.poll.v1.Vote
	1,  // 6: server.poll.v1.UpdateResultsMessage.QuestionsAndAnswers:type_name -> server.poll.v1.QuestionAndAnswers
	16, // 7: server.poll.v1.UpdateResultsMessage.VotingStartTime:type_name -> google.protobuf.Timestamp
	16, // 8: server.poll.v1.UpdateResultsMessage.VotingEndTime:type_name -> google.protobuf.Timestamp
	16, // 9: server.poll.v1.EndVotingEventMessage.VotingEndTime:type_name -> google.protobuf.Timestamp
	8,  // 10: server.poll.v1.ParticipantAudienceJoinResponse.updateResultsMessage:type_name -> server.poll.v1.UpdateResultsMessage
	8,  // 11: server.poll.v1.ParticipantVoteResponse.updateResultsMessage:type_name -> server.poll.v1.UpdateResultsMessage
	8,  // 12: server.poll.v1.GameRoomCreateResponse.updateResultsMessage:type_name -> server.poll.v1.UpdateResultsMessage
	8,  // 13: server.poll.v1.StartVotingResponse.updateResultsMessage:type_name -> server.poll.v1.UpdateResultsMessage
	8,  // 14: server.poll.v1.EndVotingResponse.updateResultsMessage:type_name -> server.poll.v1.UpdateResultsMessage
	8,  // 15: server.poll.v1.SubscribeResponse.updateResultsMessage:type_name -> server.poll.v1.UpdateResultsMessage
	4,  // 16: server.poll.v1.PollService.ParticipantAudienceJoinRequest:input_type -> server.poll.v1.ParticipantAudienceJoinEventMessage
	6,  // 17: server.poll.v1.PollService.ParticipantVoteRequest:input_type -> server.poll.v1.ParticipantVoteEventMessage
	2,  // 18: server.poll.v1.PollService.GameRoomCreateRequest:input_type -> server.poll.v1.GameRoomCreateEventMessage
	3,  // 19: server.poll.v1.PollService.StartVotingRequest:input_type -> server.poll.v1.StartVotingEventMessage
	9,  // 20: server.poll.v1.PollService.EndVotingRequest:input_type -> server.poll.v1.EndVotingEventMessage
	7,  // 21: server.poll.v1.PollService.SubscribeRequest:input_type -> server.poll.v1.SubscribeRequestMessage
	10, // 22: server.poll.v1.PollService.ParticipantAudienceJoinRequest:output_type -> server.poll.v1.ParticipantAudienceJoinResponse
	11, // 23: server.poll.v1.PollService.ParticipantVoteRequest:output_type -> server.poll.v1.ParticipantVoteResponse
	12, // 24: server.poll.v1.PollService.GameRoomCreateRequest:output_type -> server.poll.v1.GameRoomCreateResponse
	13, // 25: server.poll.v1.PollService.StartVotingRequest:output_type -> server.poll.v1.StartVotingResponse
	14, // 26: server.poll.v1.PollService.EndVotingRequest:output_type -> server.poll.v1.EndVotingResponse
	15, // 27: server.poll.v1.PollService.SubscribeRequest:output_type -> server.poll.v1.SubscribeResponse
	22, // [22:28] is the sub-list for method output_type
	16, // [16:22] is the sub-list for method input_type
	16, // [16:16] is the sub-list for extension type_name
	16, // [16:16] is the sub-list for extension extendee
	0,  // [0:16] is the sub-list for field type_name
}

func init() { file_server_poll_v1_poll_proto_init() }
func file_server_poll_v1_poll_proto_init() {
	if File_server_poll_v1_poll_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_server_poll_v1_poll_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_server_poll_v1_poll_proto_goTypes,
		DependencyIndexes: file_server_poll_v1_poll_proto_depIdxs,
		MessageInfos:      file_server_poll_v1_poll_proto_msgTypes,
	}.Build()
	File_server_poll_v1_poll_proto = out.File
	file_server_poll_v1_poll_proto_rawDesc = nil
	file_server_poll_v1_poll_proto_goTypes = nil
	file_server_poll_v1_poll_proto_depIdxs = nil
}
