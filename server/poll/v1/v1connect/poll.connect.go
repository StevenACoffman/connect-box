// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: server/poll/v1/poll.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Khan/hackathon-khanmigogo/server/poll/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// PollServiceName is the fully-qualified name of the PollService service.
	PollServiceName = "server.poll.v1.PollService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// PollServiceParticipantAudienceJoinRequestProcedure is the fully-qualified name of the
	// PollService's ParticipantAudienceJoinRequest RPC.
	PollServiceParticipantAudienceJoinRequestProcedure = "/server.poll.v1.PollService/ParticipantAudienceJoinRequest"
	// PollServiceParticipantVoteRequestProcedure is the fully-qualified name of the PollService's
	// ParticipantVoteRequest RPC.
	PollServiceParticipantVoteRequestProcedure = "/server.poll.v1.PollService/ParticipantVoteRequest"
	// PollServiceGameRoomCreateRequestProcedure is the fully-qualified name of the PollService's
	// GameRoomCreateRequest RPC.
	PollServiceGameRoomCreateRequestProcedure = "/server.poll.v1.PollService/GameRoomCreateRequest"
	// PollServiceStartVotingRequestProcedure is the fully-qualified name of the PollService's
	// StartVotingRequest RPC.
	PollServiceStartVotingRequestProcedure = "/server.poll.v1.PollService/StartVotingRequest"
	// PollServiceEndVotingRequestProcedure is the fully-qualified name of the PollService's
	// EndVotingRequest RPC.
	PollServiceEndVotingRequestProcedure = "/server.poll.v1.PollService/EndVotingRequest"
	// PollServiceSubscribeRequestProcedure is the fully-qualified name of the PollService's
	// SubscribeRequest RPC.
	PollServiceSubscribeRequestProcedure = "/server.poll.v1.PollService/SubscribeRequest"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	pollServiceServiceDescriptor                              = v1.File_server_poll_v1_poll_proto.Services().ByName("PollService")
	pollServiceParticipantAudienceJoinRequestMethodDescriptor = pollServiceServiceDescriptor.Methods().ByName("ParticipantAudienceJoinRequest")
	pollServiceParticipantVoteRequestMethodDescriptor         = pollServiceServiceDescriptor.Methods().ByName("ParticipantVoteRequest")
	pollServiceGameRoomCreateRequestMethodDescriptor          = pollServiceServiceDescriptor.Methods().ByName("GameRoomCreateRequest")
	pollServiceStartVotingRequestMethodDescriptor             = pollServiceServiceDescriptor.Methods().ByName("StartVotingRequest")
	pollServiceEndVotingRequestMethodDescriptor               = pollServiceServiceDescriptor.Methods().ByName("EndVotingRequest")
	pollServiceSubscribeRequestMethodDescriptor               = pollServiceServiceDescriptor.Methods().ByName("SubscribeRequest")
)

// PollServiceClient is a client for the server.poll.v1.PollService service.
type PollServiceClient interface {
	ParticipantAudienceJoinRequest(context.Context, *connect.Request[v1.ParticipantAudienceJoinEventMessage]) (*connect.Response[v1.ParticipantAudienceJoinResponse], error)
	ParticipantVoteRequest(context.Context, *connect.Request[v1.ParticipantVoteEventMessage]) (*connect.Response[v1.ParticipantVoteResponse], error)
	GameRoomCreateRequest(context.Context, *connect.Request[v1.GameRoomCreateEventMessage]) (*connect.Response[v1.GameRoomCreateResponse], error)
	StartVotingRequest(context.Context, *connect.Request[v1.StartVotingEventMessage]) (*connect.Response[v1.StartVotingResponse], error)
	EndVotingRequest(context.Context, *connect.Request[v1.EndVotingEventMessage]) (*connect.Response[v1.EndVotingResponse], error)
	SubscribeRequest(context.Context, *connect.Request[v1.SubscribeRequestMessage]) (*connect.ServerStreamForClient[v1.SubscribeResponse], error)
}

// NewPollServiceClient constructs a client for the server.poll.v1.PollService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewPollServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) PollServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &pollServiceClient{
		participantAudienceJoinRequest: connect.NewClient[v1.ParticipantAudienceJoinEventMessage, v1.ParticipantAudienceJoinResponse](
			httpClient,
			baseURL+PollServiceParticipantAudienceJoinRequestProcedure,
			connect.WithSchema(pollServiceParticipantAudienceJoinRequestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		participantVoteRequest: connect.NewClient[v1.ParticipantVoteEventMessage, v1.ParticipantVoteResponse](
			httpClient,
			baseURL+PollServiceParticipantVoteRequestProcedure,
			connect.WithSchema(pollServiceParticipantVoteRequestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		gameRoomCreateRequest: connect.NewClient[v1.GameRoomCreateEventMessage, v1.GameRoomCreateResponse](
			httpClient,
			baseURL+PollServiceGameRoomCreateRequestProcedure,
			connect.WithSchema(pollServiceGameRoomCreateRequestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		startVotingRequest: connect.NewClient[v1.StartVotingEventMessage, v1.StartVotingResponse](
			httpClient,
			baseURL+PollServiceStartVotingRequestProcedure,
			connect.WithSchema(pollServiceStartVotingRequestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		endVotingRequest: connect.NewClient[v1.EndVotingEventMessage, v1.EndVotingResponse](
			httpClient,
			baseURL+PollServiceEndVotingRequestProcedure,
			connect.WithSchema(pollServiceEndVotingRequestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
		subscribeRequest: connect.NewClient[v1.SubscribeRequestMessage, v1.SubscribeResponse](
			httpClient,
			baseURL+PollServiceSubscribeRequestProcedure,
			connect.WithSchema(pollServiceSubscribeRequestMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// pollServiceClient implements PollServiceClient.
type pollServiceClient struct {
	participantAudienceJoinRequest *connect.Client[v1.ParticipantAudienceJoinEventMessage, v1.ParticipantAudienceJoinResponse]
	participantVoteRequest         *connect.Client[v1.ParticipantVoteEventMessage, v1.ParticipantVoteResponse]
	gameRoomCreateRequest          *connect.Client[v1.GameRoomCreateEventMessage, v1.GameRoomCreateResponse]
	startVotingRequest             *connect.Client[v1.StartVotingEventMessage, v1.StartVotingResponse]
	endVotingRequest               *connect.Client[v1.EndVotingEventMessage, v1.EndVotingResponse]
	subscribeRequest               *connect.Client[v1.SubscribeRequestMessage, v1.SubscribeResponse]
}

// ParticipantAudienceJoinRequest calls server.poll.v1.PollService.ParticipantAudienceJoinRequest.
func (c *pollServiceClient) ParticipantAudienceJoinRequest(ctx context.Context, req *connect.Request[v1.ParticipantAudienceJoinEventMessage]) (*connect.Response[v1.ParticipantAudienceJoinResponse], error) {
	return c.participantAudienceJoinRequest.CallUnary(ctx, req)
}

// ParticipantVoteRequest calls server.poll.v1.PollService.ParticipantVoteRequest.
func (c *pollServiceClient) ParticipantVoteRequest(ctx context.Context, req *connect.Request[v1.ParticipantVoteEventMessage]) (*connect.Response[v1.ParticipantVoteResponse], error) {
	return c.participantVoteRequest.CallUnary(ctx, req)
}

// GameRoomCreateRequest calls server.poll.v1.PollService.GameRoomCreateRequest.
func (c *pollServiceClient) GameRoomCreateRequest(ctx context.Context, req *connect.Request[v1.GameRoomCreateEventMessage]) (*connect.Response[v1.GameRoomCreateResponse], error) {
	return c.gameRoomCreateRequest.CallUnary(ctx, req)
}

// StartVotingRequest calls server.poll.v1.PollService.StartVotingRequest.
func (c *pollServiceClient) StartVotingRequest(ctx context.Context, req *connect.Request[v1.StartVotingEventMessage]) (*connect.Response[v1.StartVotingResponse], error) {
	return c.startVotingRequest.CallUnary(ctx, req)
}

// EndVotingRequest calls server.poll.v1.PollService.EndVotingRequest.
func (c *pollServiceClient) EndVotingRequest(ctx context.Context, req *connect.Request[v1.EndVotingEventMessage]) (*connect.Response[v1.EndVotingResponse], error) {
	return c.endVotingRequest.CallUnary(ctx, req)
}

// SubscribeRequest calls server.poll.v1.PollService.SubscribeRequest.
func (c *pollServiceClient) SubscribeRequest(ctx context.Context, req *connect.Request[v1.SubscribeRequestMessage]) (*connect.ServerStreamForClient[v1.SubscribeResponse], error) {
	return c.subscribeRequest.CallServerStream(ctx, req)
}

// PollServiceHandler is an implementation of the server.poll.v1.PollService service.
type PollServiceHandler interface {
	ParticipantAudienceJoinRequest(context.Context, *connect.Request[v1.ParticipantAudienceJoinEventMessage]) (*connect.Response[v1.ParticipantAudienceJoinResponse], error)
	ParticipantVoteRequest(context.Context, *connect.Request[v1.ParticipantVoteEventMessage]) (*connect.Response[v1.ParticipantVoteResponse], error)
	GameRoomCreateRequest(context.Context, *connect.Request[v1.GameRoomCreateEventMessage]) (*connect.Response[v1.GameRoomCreateResponse], error)
	StartVotingRequest(context.Context, *connect.Request[v1.StartVotingEventMessage]) (*connect.Response[v1.StartVotingResponse], error)
	EndVotingRequest(context.Context, *connect.Request[v1.EndVotingEventMessage]) (*connect.Response[v1.EndVotingResponse], error)
	SubscribeRequest(context.Context, *connect.Request[v1.SubscribeRequestMessage], *connect.ServerStream[v1.SubscribeResponse]) error
}

// NewPollServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewPollServiceHandler(svc PollServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	pollServiceParticipantAudienceJoinRequestHandler := connect.NewUnaryHandler(
		PollServiceParticipantAudienceJoinRequestProcedure,
		svc.ParticipantAudienceJoinRequest,
		connect.WithSchema(pollServiceParticipantAudienceJoinRequestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pollServiceParticipantVoteRequestHandler := connect.NewUnaryHandler(
		PollServiceParticipantVoteRequestProcedure,
		svc.ParticipantVoteRequest,
		connect.WithSchema(pollServiceParticipantVoteRequestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pollServiceGameRoomCreateRequestHandler := connect.NewUnaryHandler(
		PollServiceGameRoomCreateRequestProcedure,
		svc.GameRoomCreateRequest,
		connect.WithSchema(pollServiceGameRoomCreateRequestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pollServiceStartVotingRequestHandler := connect.NewUnaryHandler(
		PollServiceStartVotingRequestProcedure,
		svc.StartVotingRequest,
		connect.WithSchema(pollServiceStartVotingRequestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pollServiceEndVotingRequestHandler := connect.NewUnaryHandler(
		PollServiceEndVotingRequestProcedure,
		svc.EndVotingRequest,
		connect.WithSchema(pollServiceEndVotingRequestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	pollServiceSubscribeRequestHandler := connect.NewServerStreamHandler(
		PollServiceSubscribeRequestProcedure,
		svc.SubscribeRequest,
		connect.WithSchema(pollServiceSubscribeRequestMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/server.poll.v1.PollService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case PollServiceParticipantAudienceJoinRequestProcedure:
			pollServiceParticipantAudienceJoinRequestHandler.ServeHTTP(w, r)
		case PollServiceParticipantVoteRequestProcedure:
			pollServiceParticipantVoteRequestHandler.ServeHTTP(w, r)
		case PollServiceGameRoomCreateRequestProcedure:
			pollServiceGameRoomCreateRequestHandler.ServeHTTP(w, r)
		case PollServiceStartVotingRequestProcedure:
			pollServiceStartVotingRequestHandler.ServeHTTP(w, r)
		case PollServiceEndVotingRequestProcedure:
			pollServiceEndVotingRequestHandler.ServeHTTP(w, r)
		case PollServiceSubscribeRequestProcedure:
			pollServiceSubscribeRequestHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedPollServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedPollServiceHandler struct{}

func (UnimplementedPollServiceHandler) ParticipantAudienceJoinRequest(context.Context, *connect.Request[v1.ParticipantAudienceJoinEventMessage]) (*connect.Response[v1.ParticipantAudienceJoinResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.poll.v1.PollService.ParticipantAudienceJoinRequest is not implemented"))
}

func (UnimplementedPollServiceHandler) ParticipantVoteRequest(context.Context, *connect.Request[v1.ParticipantVoteEventMessage]) (*connect.Response[v1.ParticipantVoteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.poll.v1.PollService.ParticipantVoteRequest is not implemented"))
}

func (UnimplementedPollServiceHandler) GameRoomCreateRequest(context.Context, *connect.Request[v1.GameRoomCreateEventMessage]) (*connect.Response[v1.GameRoomCreateResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.poll.v1.PollService.GameRoomCreateRequest is not implemented"))
}

func (UnimplementedPollServiceHandler) StartVotingRequest(context.Context, *connect.Request[v1.StartVotingEventMessage]) (*connect.Response[v1.StartVotingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.poll.v1.PollService.StartVotingRequest is not implemented"))
}

func (UnimplementedPollServiceHandler) EndVotingRequest(context.Context, *connect.Request[v1.EndVotingEventMessage]) (*connect.Response[v1.EndVotingResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("server.poll.v1.PollService.EndVotingRequest is not implemented"))
}

func (UnimplementedPollServiceHandler) SubscribeRequest(context.Context, *connect.Request[v1.SubscribeRequestMessage], *connect.ServerStream[v1.SubscribeResponse]) error {
	return connect.NewError(connect.CodeUnimplemented, errors.New("server.poll.v1.PollService.SubscribeRequest is not implemented"))
}
